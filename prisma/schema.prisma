// This is your Prisma schema file
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id        String   @id @default(cuid())
    email     String   @unique
    name      String
    avatar    String?
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    ownedTeams    Team[]        @relation("TeamOwner")
    memberOfTeams TeamMember[]
    ownedBoards   Board[]       @relation("BoardOwner")
    boardMembers  BoardMember[]
    assignedTasks Task[]        @relation("TaskAssignees")
    comments      Comment[]
}

model Team {
    id          String   @id @default(cuid())
    name        String
    description String?
    avatar      String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    ownerId     String

    // Relations
    owner   User         @relation("TeamOwner", fields: [ownerId], references: [id])
    members TeamMember[]
    boards  Board[]
}

model TeamMember {
    id       String   @id @default(cuid())
    teamId   String
    userId   String
    role     Role     @default(MEMBER)
    joinedAt DateTime @default(now())

    // Relations
    team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([teamId, userId])
}

model Board {
    id          String     @id @default(cuid())
    title       String
    description String?
    background  String?    @default("#F8FAFC")
    favorite    Boolean    @default(false)
    visibility  Visibility @default(PRIVATE)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    ownerId     String
    teamId      String?

    // Relations
    owner   User          @relation("BoardOwner", fields: [ownerId], references: [id])
    team    Team?         @relation(fields: [teamId], references: [id], onDelete: SetNull)
    members BoardMember[]
    columns Column[]
}

model BoardMember {
    id       String   @id @default(cuid())
    boardId  String
    userId   String
    role     Role     @default(MEMBER)
    joinedAt DateTime @default(now())

    // Relations
    board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([boardId, userId])
}

model Column {
    id        String   @id @default(cuid())
    title     String
    order     Int
    boardId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    board Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
    tasks Task[]
}

model Task {
    id          String    @id @default(cuid())
    title       String
    description String?
    dueDate     DateTime?
    colorLabel  String?
    stage       String?
    department  String?
    archived    Boolean   @default(false)
    order       Int
    columnId    String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // Relations
    column     Column      @relation(fields: [columnId], references: [id], onDelete: Cascade)
    assignees  User[]      @relation("TaskAssignees")
    labels     Label[]
    comments   Comment[]
    checklists Checklist[]
}

model Label {
    id        String   @id @default(cuid())
    name      String
    color     String?
    createdAt DateTime @default(now())

    // Relations
    tasks Task[]
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    taskId    String
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Checklist {
    id        String   @id @default(cuid())
    title     String
    taskId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    task  Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)
    items ChecklistItem[]
}

model ChecklistItem {
    id          String   @id @default(cuid())
    content     String
    completed   Boolean  @default(false)
    checklistId String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    checklist Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
}

enum Role {
    OWNER
    ADMIN
    MEMBER
    OBSERVER
}

enum Visibility {
    PRIVATE
    TEAM
    PUBLIC
}
